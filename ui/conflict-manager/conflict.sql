/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 8.0.31 : Database - conflict
*********************************************************************
*/


/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`conflict` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;

USE `conflict`;

/*Table structure for table `file` */

DROP TABLE IF EXISTS `file`;

CREATE TABLE `file` (
  `fileName` varchar(200) NOT NULL,
  `path` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `ours` varbinary(20000) DEFAULT NULL,
  `theirs` varbinary(20000) DEFAULT NULL,
  `base` varbinary(20000) DEFAULT NULL,
  `isSolve` int DEFAULT '1',
  `repo` varchar(200) DEFAULT NULL,
  `relPath` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`path`),
  FULLTEXT KEY `fileName` (`fileName`),
  FULLTEXT KEY `repo` (`repo`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Data for the table `file` */

/*Table structure for table `solved` */

DROP TABLE IF EXISTS `solved`;

CREATE TABLE `solved` (
  `chunk` text,
  `solve` text,
  `path` varchar(100) DEFAULT NULL,
  FULLTEXT KEY `chunk` (`chunk`),
  FULLTEXT KEY `path` (`path`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Data for the table `solved` */

insert  into `solved`(`chunk`,`solve`,`path`) values ('	Test createTest(Plan plan) {\n		Description description= plan.getDescription();\n		if (plan.isTest())\n			return createSingleTest(description);\n	Test createTest(Description description) {\n		if (description.isTest())\n			return new JUnit4TestCaseFacade(description);\n	public List<Test> asTestList(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isTest())\n			return Arrays.asList(asTestCase(description));\n','	public List<Test> asTestList(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isTest())\n			return Arrays.asList(asTestCase(description));\n','D'),('			TestSuite suite = new TestSuite(description.getDisplayName());\n			for (Plan child : plan.getChildren())\n				suite.addTest(asTest(child));\n			return suite;\n			TestSuite suite = new TestSuite(description.getDisplayName());\n			for (Description child : description.getChildren())\n				suite.addTest(asTest(child));\n			return suite;\n			List<Test> returnThis= new ArrayList<Test>();\n			for (Plan child : plan.getChildren()) {\n				returnThis.add(asTest(child));\n			}\n			return returnThis;\n','			List<Test> returnThis= new ArrayList<Test>();\n			for (Plan child : plan.getChildren()) {\n				returnThis.add(asTest(child));\n			}\n			return returnThis;\n','D:\\'),('	private JUnit4TestCaseFacade createSingleTest(Description description) {\n		return new JUnit4TestCaseFacade(description);\n	}\n\n	public Test asTest(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isSuite())\n			return asTestSuite(plan);\n		else\n			return asTestCase(description);\n	}\n\n	private Test asTestSuite(Plan plan) {\n		return createTestSuite(plan);\n	}\n\n	private Test createTestSuite(Plan plan) {\n		TestSuite suite= new TestSuite(plan.getDescription().getDisplayName());\n		for (Plan child : plan.getChildren())\n			suite.addTest(asTest(child));\n		return suite;\n	}\n	\n	private Test asTestCase(Description description) {\n		if (!containsKey(description))\n			put(description, createTestCase(description));\n		return get(description);\n	}\n\n	private Test createTestCase(Description description) {\n		return new JUnit4TestCaseFacade(description);\n	}\n\n','	public Test asTest(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isSuite())\n			return asTestSuite(plan);\n		else\n			return asTestCase(description);\n	}\n\n	private Test asTestSuite(Plan plan) {\n		return createTestSuite(plan);\n	}\n\n	private Test createTestSuite(Plan plan) {\n		TestSuite suite= new TestSuite(plan.getDescription().getDisplayName());\n		for (Plan child : plan.getChildren())\n			suite.addTest(asTest(child));\n		return suite;\n	}\n	\n	private Test asTestCase(Description description) {\n		if (!containsKey(description))\n			put(description, createTestCase(description));\n		return get(description);\n	}\n\n	private Test createTestCase(Description description) {\n		return new JUnit4TestCaseFacade(description);\n	}\n\n','D:\\temp3'),('				result.addError(asSingleTest(failure.getDescription()), failure.getException());\n				result.addError(asTest(failure.getDescription()), failure.getException());\n				result.addError(asTestCase(failure.getDescription()), failure\n						.getException());\n','				result.addError(asTestCase(failure.getDescription()), failure\n						.getException());\n','D:\\temp3'),('			public void testFinished(Description description)\n					throws Exception {\n				result.endTest(asSingleTest(description));\n			public void testFinished(Description description)\n					throws Exception {\n				result.endTest(asTest(description));\n			public void testFinished(Description description) throws Exception {\n				result.endTest(asTestCase(description));\n','			public void testFinished(Description description) throws Exception {\n				result.endTest(asTestCase(description));\n','D:\\temp3'),('			public void testStarted(Description description)\n					throws Exception {\n				// TODO: this needs to test that the test is created if not seen before\n				result.startTest(asSingleTest(description));\n			public void testStarted(Description description)\n					throws Exception {\n				result.startTest(asTest(description));\n			public void testStarted(Description description) throws Exception {\n				result.startTest(asTestCase(description));\n','			public void testStarted(Description description) throws Exception {\n				result.startTest(asTestCase(description));\n','1'),('	Test createTest(Plan plan) {\n		Description description= plan.getDescription();\n		if (plan.isTest())\n			return createSingleTest(description);\n	Test createTest(Description description) {\n		if (description.isTest())\n			return new JUnit4TestCaseFacade(description);\n	public List<Test> asTestList(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isTest())\n			return Arrays.asList(asTestCase(description));\n','	public List<Test> asTestList(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isTest())\n			return Arrays.asList(asTestCase(description));\n','D'),('			TestSuite suite = new TestSuite(description.getDisplayName());\n			for (Plan child : plan.getChildren())\n				suite.addTest(asTest(child));\n			return suite;\n			TestSuite suite = new TestSuite(description.getDisplayName());\n			for (Description child : description.getChildren())\n				suite.addTest(asTest(child));\n			return suite;\n			List<Test> returnThis= new ArrayList<Test>();\n			for (Plan child : plan.getChildren()) {\n				returnThis.add(asTest(child));\n			}\n			return returnThis;\n','			List<Test> returnThis= new ArrayList<Test>();\n			for (Plan child : plan.getChildren()) {\n				returnThis.add(asTest(child));\n			}\n			return returnThis;\n','D'),('	private JUnit4TestCaseFacade createSingleTest(Description description) {\n		return new JUnit4TestCaseFacade(description);\n	}\n\n	public Test asTest(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isSuite())\n			return asTestSuite(plan);\n		else\n			return asTestCase(description);\n	}\n\n	private Test asTestSuite(Plan plan) {\n		return createTestSuite(plan);\n	}\n\n	private Test createTestSuite(Plan plan) {\n		TestSuite suite= new TestSuite(plan.getDescription().getDisplayName());\n		for (Plan child : plan.getChildren())\n			suite.addTest(asTest(child));\n		return suite;\n	}\n	\n	private Test asTestCase(Description description) {\n		if (!containsKey(description))\n			put(description, createTestCase(description));\n		return get(description);\n	}\n\n	private Test createTestCase(Description description) {\n		return new JUnit4TestCaseFacade(description);\n	}\n\n','	public Test asTest(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isSuite())\n			return asTestSuite(plan);\n		else\n			return asTestCase(description);\n	}\n\n	private Test asTestSuite(Plan plan) {\n		return createTestSuite(plan);\n	}\n\n	private Test createTestSuite(Plan plan) {\n		TestSuite suite= new TestSuite(plan.getDescription().getDisplayName());\n		for (Plan child : plan.getChildren())\n			suite.addTest(asTest(child));\n		return suite;\n	}\n	\n	private Test asTestCase(Description description) {\n		if (!containsKey(description))\n			put(description, createTestCase(description));\n		return get(description);\n	}\n\n	private Test createTestCase(Description description) {\n		return new JUnit4TestCaseFacade(description);\n	}\n\n','D:\\temp3'),('				result.addError(asSingleTest(failure.getDescription()), failure.getException());\n				result.addError(asTest(failure.getDescription()), failure.getException());\n				result.addError(asTestCase(failure.getDescription()), failure\n						.getException());\n','				result.addError(asTestCase(failure.getDescription()), failure\n						.getException());\n','D:\\temp3'),('			public void testFinished(Description description)\n					throws Exception {\n				result.endTest(asSingleTest(description));\n			public void testFinished(Description description)\n					throws Exception {\n				result.endTest(asTest(description));\n			public void testFinished(Description description) throws Exception {\n				result.endTest(asTestCase(description));\n','			public void testFinished(Description description) throws Exception {\n				result.endTest(asTestCase(description));\n','D:\\temp3'),('			public void testStarted(Description description)\n					throws Exception {\n				// TODO: this needs to test that the test is created if not seen before\n				result.startTest(asSingleTest(description));\n			public void testStarted(Description description)\n					throws Exception {\n				result.startTest(asTest(description));\n			public void testStarted(Description description) throws Exception {\n				result.startTest(asTestCase(description));\n','			public void testStarted(Description description) throws Exception {\n				result.startTest(asTestCase(description));\n','1'),(NULL,NULL,'1'),('	Test createTest(Plan plan) {\n		Description description= plan.getDescription();\n		if (plan.isTest())\n			return createSingleTest(description);\n	Test createTest(Description description) {\n		if (description.isTest())\n			return new JUnit4TestCaseFacade(description);\n	public List<Test> asTestList(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isTest())\n			return Arrays.asList(asTestCase(description));\n','	public List<Test> asTestList(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isTest())\n			return Arrays.asList(asTestCase(description));\n','D:\\\\temp3\\\\1.java'),('			TestSuite suite = new TestSuite(description.getDisplayName());\n			for (Plan child : plan.getChildren())\n				suite.addTest(asTest(child));\n			return suite;\n			TestSuite suite = new TestSuite(description.getDisplayName());\n			for (Description child : description.getChildren())\n				suite.addTest(asTest(child));\n			return suite;\n			List<Test> returnThis= new ArrayList<Test>();\n			for (Plan child : plan.getChildren()) {\n				returnThis.add(asTest(child));\n			}\n			return returnThis;\n','			List<Test> returnThis= new ArrayList<Test>();\n			for (Plan child : plan.getChildren()) {\n				returnThis.add(asTest(child));\n			}\n			return returnThis;\n','D:\\\\temp3\\\\1.java'),('	private JUnit4TestCaseFacade createSingleTest(Description description) {\n		return new JUnit4TestCaseFacade(description);\n	}\n\n	public Test asTest(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isSuite())\n			return asTestSuite(plan);\n		else\n			return asTestCase(description);\n	}\n\n	private Test asTestSuite(Plan plan) {\n		return createTestSuite(plan);\n	}\n\n	private Test createTestSuite(Plan plan) {\n		TestSuite suite= new TestSuite(plan.getDescription().getDisplayName());\n		for (Plan child : plan.getChildren())\n			suite.addTest(asTest(child));\n		return suite;\n	}\n	\n	private Test asTestCase(Description description) {\n		if (!containsKey(description))\n			put(description, createTestCase(description));\n		return get(description);\n	}\n\n	private Test createTestCase(Description description) {\n		return new JUnit4TestCaseFacade(description);\n	}\n\n','	public Test asTest(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isSuite())\n			return asTestSuite(plan);\n		else\n			return asTestCase(description);\n	}\n\n	private Test asTestSuite(Plan plan) {\n		return createTestSuite(plan);\n	}\n\n	private Test createTestSuite(Plan plan) {\n		TestSuite suite= new TestSuite(plan.getDescription().getDisplayName());\n		for (Plan child : plan.getChildren())\n			suite.addTest(asTest(child));\n		return suite;\n	}\n	\n	private Test asTestCase(Description description) {\n		if (!containsKey(description))\n			put(description, createTestCase(description));\n		return get(description);\n	}\n\n	private Test createTestCase(Description description) {\n		return new JUnit4TestCaseFacade(description);\n	}\n\n','D:\\\\temp3\\\\1.java'),('				result.addError(asSingleTest(failure.getDescription()), failure.getException());\n				result.addError(asTest(failure.getDescription()), failure.getException());\n				result.addError(asTestCase(failure.getDescription()), failure\n						.getException());\n','				result.addError(asTestCase(failure.getDescription()), failure\n						.getException());\n','D:\\\\temp3\\\\1.java'),('			public void testFinished(Description description)\n					throws Exception {\n				result.endTest(asSingleTest(description));\n			public void testFinished(Description description)\n					throws Exception {\n				result.endTest(asTest(description));\n			public void testFinished(Description description) throws Exception {\n				result.endTest(asTestCase(description));\n','			public void testFinished(Description description) throws Exception {\n				result.endTest(asTestCase(description));\n','D:\\\\temp3\\\\1.java'),('			public void testStarted(Description description)\n					throws Exception {\n				// TODO: this needs to test that the test is created if not seen before\n				result.startTest(asSingleTest(description));\n			public void testStarted(Description description)\n					throws Exception {\n				result.startTest(asTest(description));\n			public void testStarted(Description description) throws Exception {\n				result.startTest(asTestCase(description));\n','			public void testStarted(Description description) throws Exception {\n				result.startTest(asTestCase(description));\n','D:\\\\temp3\\\\1.java'),('	Test createTest(Plan plan) {\n		Description description= plan.getDescription();\n		if (plan.isTest())\n			return createSingleTest(description);\n	Test createTest(Description description) {\n		if (description.isTest())\n			return new JUnit4TestCaseFacade(description);\n	public List<Test> asTestList(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isTest())\n			return Arrays.asList(asTestCase(description));\n','	public List<Test> asTestList(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isTest())\n			return Arrays.asList(asTestCase(description));\n','D:\\\\temp3\\\\1.java'),('			TestSuite suite = new TestSuite(description.getDisplayName());\n			for (Plan child : plan.getChildren())\n				suite.addTest(asTest(child));\n			return suite;\n			TestSuite suite = new TestSuite(description.getDisplayName());\n			for (Description child : description.getChildren())\n				suite.addTest(asTest(child));\n			return suite;\n			List<Test> returnThis= new ArrayList<Test>();\n			for (Plan child : plan.getChildren()) {\n				returnThis.add(asTest(child));\n			}\n			return returnThis;\n','			List<Test> returnThis= new ArrayList<Test>();\n			for (Plan child : plan.getChildren()) {\n				returnThis.add(asTest(child));\n			}\n			return returnThis;\n','D:\\\\temp3\\\\1.java'),('	private JUnit4TestCaseFacade createSingleTest(Description description) {\n		return new JUnit4TestCaseFacade(description);\n	}\n\n	public Test asTest(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isSuite())\n			return asTestSuite(plan);\n		else\n			return asTestCase(description);\n	}\n\n	private Test asTestSuite(Plan plan) {\n		return createTestSuite(plan);\n	}\n\n	private Test createTestSuite(Plan plan) {\n		TestSuite suite= new TestSuite(plan.getDescription().getDisplayName());\n		for (Plan child : plan.getChildren())\n			suite.addTest(asTest(child));\n		return suite;\n	}\n	\n	private Test asTestCase(Description description) {\n		if (!containsKey(description))\n			put(description, createTestCase(description));\n		return get(description);\n	}\n\n	private Test createTestCase(Description description) {\n		return new JUnit4TestCaseFacade(description);\n	}\n\n','	public Test asTest(Plan plan) {\n		Description description= plan.getDescription();\n		if (description.isSuite())\n			return asTestSuite(plan);\n		else\n			return asTestCase(description);\n	}\n\n	private Test asTestSuite(Plan plan) {\n		return createTestSuite(plan);\n	}\n\n	private Test createTestSuite(Plan plan) {\n		TestSuite suite= new TestSuite(plan.getDescription().getDisplayName());\n		for (Plan child : plan.getChildren())\n			suite.addTest(asTest(child));\n		return suite;\n	}\n	\n	private Test asTestCase(Description description) {\n		if (!containsKey(description))\n			put(description, createTestCase(description));\n		return get(description);\n	}\n\n	private Test createTestCase(Description description) {\n		return new JUnit4TestCaseFacade(description);\n	}\n\n','D:\\\\temp3\\\\1.java'),('				result.addError(asSingleTest(failure.getDescription()), failure.getException());\n				result.addError(asTest(failure.getDescription()), failure.getException());\n				result.addError(asTestCase(failure.getDescription()), failure\n						.getException());\n','				result.addError(asTestCase(failure.getDescription()), failure\n						.getException());\n','D:\\\\temp3\\\\1.java'),('			public void testFinished(Description description)\n					throws Exception {\n				result.endTest(asSingleTest(description));\n			public void testFinished(Description description)\n					throws Exception {\n				result.endTest(asTest(description));\n			public void testFinished(Description description) throws Exception {\n				result.endTest(asTestCase(description));\n','			public void testFinished(Description description) throws Exception {\n				result.endTest(asTestCase(description));\n','D:\\\\temp3\\\\1.java'),('			public void testStarted(Description description)\n					throws Exception {\n				// TODO: this needs to test that the test is created if not seen before\n				result.startTest(asSingleTest(description));\n			public void testStarted(Description description)\n					throws Exception {\n				result.startTest(asTest(description));\n			public void testStarted(Description description) throws Exception {\n				result.startTest(asTestCase(description));\n','			public void testStarted(Description description) throws Exception {\n				result.startTest(asTestCase(description));\n','D:\\\\temp3\\\\1.java'),('import org.junit.runner.notification.RunNotifier;\nimport org.junit.runners.BlockJUnit4ClassRunner;\nimport org.junit.runners.BlockJUnit4ClassRunner;\n','\n','D:/temp4/1/1.txt'),('import org.junit.tests.SafeStatement;\nimport org.junit.runners.Suite;\nimport org.junit.runners.model.InitializationError;\nimport org.junit.runners.model.RunnerBuilder;\nimport org.junit.runners.Suite;\nimport org.junit.runners.model.InitializationError;\nimport org.junit.runners.model.RunnerBuilder;\nimport org.junit.runners.model.RunnerInterceptor;\n','import org.junit.tests.SafeStatement;\n','D:/temp4/1/1.txt'),('	private static void parallelize(Runner runner) {\n		((ParentRunner<?>) runner).installDecorator(new ParentRunner.Decorator() {\n			private final List<Future<Object>> fResults= new ArrayList<Future<Object>>();\n\n			private final ExecutorService fService= Executors\n					.newCachedThreadPool();\n\n			public void runAll(SafeStatement statement) {\n				statement.execute();\n				for (Future<Object> each : fResults)\n					try {\n						each.get();\n					} catch (Exception e) {\n						e.printStackTrace();\n					}\n\n			}\n\n			public void runChild(final SafeStatement statement) {\n				fResults.add(fService.submit(new Callable<Object>() {\n					public Object call() throws Exception {\n						statement.execute();\n						return null;\n					}\n				}));\n			}\n		});\n	}\n	\n	private static <T> Runner parallelize(ParentRunner<T> runner)\n			throws InitializationError {\n		return new ParallelParentRunner<T>(runner);\n	}\n\n	private static class ParallelParentRunner<T> extends ParentRunner<T> {\n		private final ParentRunner<T> fDelegate;\n\n		private final List<Future<Object>> fResults= new ArrayList<Future<Object>>();\n\n		private final ExecutorService fService= Executors.newCachedThreadPool();\n\n		public ParallelParentRunner(ParentRunner<T> delegate)\n				throws InitializationError {\n			super(delegate.getTestClass().getJavaClass());\n			fDelegate= delegate;\n		}\n\n		@Override\n		public Description describeChild(T child) {\n			// TODO (May 4, 2009 4:34:05 PM): How to do this for real?\n			return fDelegate.internalDescribeChild(child);\n		}\n\n		@Override\n		public List<T> getChildren() {\n			return fDelegate.internalGetChildren();\n		}\n\n		@Override\n		public void runChild(final T child, final RunNotifier notifier) {\n			fResults.add(fService.submit(new Callable<Object>() {\n				public Object call() throws Exception {\n					fDelegate.internalRunChild(child, notifier);\n					return null;\n				}\n			}));\n		}\n\n		@Override\n		public void run(RunNotifier notifier) {\n			super.run(notifier);\n			for (Future<Object> each : fResults)\n				try {\n					each.get();\n				} catch (Exception e) {\n					e.printStackTrace();\n				}\n		}\n	}\n\n	private static <T> Runner parallelize(ParentRunner<T> runner) {\n		runner.setRunnerInterceptor(new RunnerInterceptor() {\n			private final List<Future<Object>> fResults= new ArrayList<Future<Object>>();\n\n			private final ExecutorService fService= Executors\n					.newCachedThreadPool();\n\n			public void runChild(final Runnable childStatement) {\n				fResults.add(fService.submit(new Callable<Object>() {\n					public Object call() throws Exception {\n						childStatement.run();\n						return null;\n					}\n				}));\n			}\n\n			public void finished() {\n				for (Future<Object> each : fResults)\n					try {\n						each.get();\n					} catch (Exception e) {\n						e.printStackTrace();\n					}\n			}\n		});\n		return runner;\n	}\n\n','	private static void parallelize(Runner runner) {\n		((ParentRunner<?>) runner).installDecorator(new ParentRunner.Decorator() {\n			private final List<Future<Object>> fResults= new ArrayList<Future<Object>>();\n\n			private final ExecutorService fService= Executors\n					.newCachedThreadPool();\n\n			public void runAll(SafeStatement statement) {\n				statement.execute();\n				for (Future<Object> each : fResults)\n					try {\n						each.get();\n					} catch (Exception e) {\n						e.printStackTrace();\n					}\n\n			}\n\n			public void runChild(final SafeStatement statement) {\n				fResults.add(fService.submit(new Callable<Object>() {\n					public Object call() throws Exception {\n						statement.execute();\n						return null;\n					}\n				}));\n			}\n		});\n	}\n	\n','D:/temp4/1/1.txt'),('	private boolean shouldParallelize(Runner runner) {\n		if (runner instanceof ParentRunner) {\n			ParentRunner<?> parentRunner= (ParentRunner<?>) runner;\n			if (fClasses && parentRunner.isSuite())\n				return true;\n			if (fMethods && !parentRunner.isSuite())\n				return true;\n		}\n		return false;\n	@Override\n	protected Runner getRunner(RunnerBuilder builder, Class<?> testClass)\n			throws Throwable {\n		// TODO (May 4, 2009 4:09:16 PM): no guarantees here\n		BlockJUnit4ClassRunner runner= (BlockJUnit4ClassRunner) super.getRunner(builder, testClass);\n		return fMethods ? parallelize(runner) : runner;\n	@Override\n	protected Runner getRunner(RunnerBuilder builder, Class<?> testClass)\n			throws Throwable {\n		// TODO (May 4, 2009 4:09:16 PM): no guarantees here\n		BlockJUnit4ClassRunner runner= (BlockJUnit4ClassRunner) super\n				.getRunner(builder, testClass);\n		return fMethods ? parallelize(runner) : runner;\n','	private boolean shouldParallelize(Runner runner) {\n		if (runner instanceof ParentRunner) {\n			ParentRunner<?> parentRunner= (ParentRunner<?>) runner;\n			if (fClasses && parentRunner.isSuite())\n				return true;\n			if (fMethods && !parentRunner.isSuite())\n				return true;\n		}\n		return false;\n','D:/temp4/1/1.txt'),('        JUnitCoreTest.class,\n        FailOnTimeoutTest.class\n        JUnitCoreTest.class\n        FrameworkFieldTest.class,\n        FrameworkMethodTest.class,\n        JUnitCoreTest.class\n','        JUnitCoreTest.class,\n        FailOnTimeoutTest.class\n','D:/temp4/dir/1.txt'),('    private static final String VERSION = getVersion();\n\n	private Version() {\n		// don\'t instantiate\n	}\n	private Version() {\n		// don\'t instantiate\n	}\n    private Version() {\n        // don\'t instantiate\n    }\n','    private static final String VERSION = getVersion();\n','D:/temp4/dir/2.txt'),('	public static String id() {\n		return VERSION;\n	}\n	\n	public static void main(String[] args) {\n		System.out.println(id());\n	}\n\n	private static InputStream getPomPropertiesAsStream(String artifactId) {\n		return Version.class.getResourceAsStream(\"/META-INF/maven/junit/\" + artifactId + \"/pom.properties\");\n	}\n    \n	private static String getVersion() {\n		try {\n			final Properties properties= new Properties();\n			InputStream pomProps= getPomPropertiesAsStream(\"junit\");\n			if (pomProps != null) properties.load(pomProps);\n			String version= properties.getProperty(\"version\", \"<version>\");\n			if (pomProps != null) pomProps.close();\n			assert !version.equals(\"<version>\") : \"your class loader does not load resources at /META-INF/maven/junit/...\";\n			return version;\n		} catch (IOException e) {\n			throw new IllegalStateException(e);\n		}\n    }\n	public static String id() {\n		return \"4.11-SNAPSHOT\";\n	}\n	\n	public static void main(String[] args) {\n		System.out.println(id());\n	}\n    public static String id() {\n        return \"4.11-SNAPSHOT\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(id());\n    }\n','	private Version() {\n		// don\'t instantiate\n	}\n\n	public static String id() {\n		return VERSION;\n	}\n	\n	public static void main(String[] args) {\n		System.out.println(id());\n	}\n\n	private static InputStream getPomPropertiesAsStream(String artifactId) {\n		return Version.class.getResourceAsStream(\"/META-INF/maven/junit/\" + artifactId + \"/pom.properties\");\n	}\n    \n	private static String getVersion() {\n		try {\n			final Properties properties= new Properties();\n			InputStream pomProps= getPomPropertiesAsStream(\"junit\");\n			if (pomProps != null) properties.load(pomProps);\n			String version= properties.getProperty(\"version\", \"<version>\");\n			if (pomProps != null) pomProps.close();\n			assert !version.equals(\"<version>\") : \"your class loader does not load resources at /META-INF/maven/junit/...\";\n			return version;\n		} catch (IOException e) {\n			throw new IllegalStateException(e);\n		}\n    }\n','D:/temp4/dir/2.txt'),('import org.junit.runners.BlockJUnit4ClassRunner;\nimport org.junit.runner.notification.RunNotifier;\nimport org.junit.runners.BlockJUnit4ClassRunner;\n','import org.junit.runners.BlockJUnit4ClassRunner;\n','D:/temp4/dir/3.txt'),('import org.junit.runners.Suite;\nimport org.junit.runners.model.InitializationError;\nimport org.junit.runners.model.RunnerBuilder;\nimport org.junit.runners.model.RunnerInterceptor;\nimport org.junit.runners.Suite;\nimport org.junit.runners.model.InitializationError;\nimport org.junit.runners.model.RunnerBuilder;\nimport org.junit.tests.SafeStatement;\n','import org.junit.runners.Suite;\nimport org.junit.runners.model.InitializationError;\nimport org.junit.runners.model.RunnerBuilder;\nimport org.junit.runners.model.RunnerInterceptor;\n','D:/temp4/dir/3.txt'),('	private static <T> Runner parallelize(ParentRunner<T> runner) {\n		runner.setRunnerInterceptor(new RunnerInterceptor() {\n			private final List<Future<Object>> fResults= new ArrayList<Future<Object>>();\n\n			private final ExecutorService fService= Executors\n					.newCachedThreadPool();\n\n			public void runChild(final Runnable childStatement) {\n				fResults.add(fService.submit(new Callable<Object>() {\n					public Object call() throws Exception {\n						childStatement.run();\n						return null;\n					}\n				}));\n			}\n\n			public void finished() {\n				for (Future<Object> each : fResults)\n					try {\n						each.get();\n					} catch (Exception e) {\n						e.printStackTrace();\n					}\n			}\n		});\n		return runner;\n	}\n\n	private static <T> Runner parallelize(ParentRunner<T> runner)\n			throws InitializationError {\n		return new ParallelParentRunner<T>(runner);\n	}\n\n	private static class ParallelParentRunner<T> extends ParentRunner<T> {\n		private final ParentRunner<T> fDelegate;\n\n		private final List<Future<Object>> fResults= new ArrayList<Future<Object>>();\n\n		private final ExecutorService fService= Executors.newCachedThreadPool();\n\n		public ParallelParentRunner(ParentRunner<T> delegate)\n				throws InitializationError {\n			super(delegate.getTestClass().getJavaClass());\n			fDelegate= delegate;\n		}\n\n		@Override\n		public Description describeChild(T child) {\n			// TODO (May 4, 2009 4:34:05 PM): How to do this for real?\n			return fDelegate.internalDescribeChild(child);\n		}\n\n		@Override\n		public List<T> getChildren() {\n			return fDelegate.internalGetChildren();\n		}\n\n		@Override\n		public void runChild(final T child, final RunNotifier notifier) {\n			fResults.add(fService.submit(new Callable<Object>() {\n				public Object call() throws Exception {\n					fDelegate.internalRunChild(child, notifier);\n					return null;\n				}\n			}));\n		}\n\n		@Override\n		public void run(RunNotifier notifier) {\n			super.run(notifier);\n			for (Future<Object> each : fResults)\n				try {\n					each.get();\n				} catch (Exception e) {\n					e.printStackTrace();\n				}\n		}\n	}\n\n	private static void parallelize(Runner runner) {\n		((ParentRunner<?>) runner).installDecorator(new ParentRunner.Decorator() {\n			private final List<Future<Object>> fResults= new ArrayList<Future<Object>>();\n\n			private final ExecutorService fService= Executors\n					.newCachedThreadPool();\n\n			public void runAll(SafeStatement statement) {\n				statement.execute();\n				for (Future<Object> each : fResults)\n					try {\n						each.get();\n					} catch (Exception e) {\n						e.printStackTrace();\n					}\n\n			}\n\n			public void runChild(final SafeStatement statement) {\n				fResults.add(fService.submit(new Callable<Object>() {\n					public Object call() throws Exception {\n						statement.execute();\n						return null;\n					}\n				}));\n			}\n		});\n	}\n	\n','	private static <T> Runner parallelize(ParentRunner<T> runner) {\n		runner.setRunnerInterceptor(new RunnerInterceptor() {\n			private final List<Future<Object>> fResults= new ArrayList<Future<Object>>();\n\n			private final ExecutorService fService= Executors\n					.newCachedThreadPool();\n\n			public void runChild(final Runnable childStatement) {\n				fResults.add(fService.submit(new Callable<Object>() {\n					public Object call() throws Exception {\n						childStatement.run();\n						return null;\n					}\n				}));\n			}\n\n			public void finished() {\n				for (Future<Object> each : fResults)\n					try {\n						each.get();\n					} catch (Exception e) {\n						e.printStackTrace();\n					}\n			}\n		});\n		return runner;\n	}\n\n','D:/temp4/dir/3.txt'),('	@Override\n	protected Runner getRunner(RunnerBuilder builder, Class<?> testClass)\n			throws Throwable {\n		// TODO (May 4, 2009 4:09:16 PM): no guarantees here\n		BlockJUnit4ClassRunner runner= (BlockJUnit4ClassRunner) super\n				.getRunner(builder, testClass);\n		return fMethods ? parallelize(runner) : runner;\n	@Override\n	protected Runner getRunner(RunnerBuilder builder, Class<?> testClass)\n			throws Throwable {\n		// TODO (May 4, 2009 4:09:16 PM): no guarantees here\n		BlockJUnit4ClassRunner runner= (BlockJUnit4ClassRunner) super.getRunner(builder, testClass);\n		return fMethods ? parallelize(runner) : runner;\n	private boolean shouldParallelize(Runner runner) {\n		if (runner instanceof ParentRunner) {\n			ParentRunner<?> parentRunner= (ParentRunner<?>) runner;\n			if (fClasses && parentRunner.isSuite())\n				return true;\n			if (fMethods && !parentRunner.isSuite())\n				return true;\n		}\n		return false;\n','	@Override\n	protected Runner getRunner(RunnerBuilder builder, Class<?> testClass)\n			throws Throwable {\n		// TODO (May 4, 2009 4:09:16 PM): no guarantees here\n		BlockJUnit4ClassRunner runner= (BlockJUnit4ClassRunner) super\n				.getRunner(builder, testClass);\n		return fMethods ? parallelize(runner) : runner;\n','D:/temp4/dir/3.txt'),('import org.junit.runners.model.TestClass;\nimport org.junit.validator.PublicClassValidator;\nimport org.junit.validator.TestClassValidator;\nimport org.junit.runners.model.TestClass;\n','import org.junit.runners.model.TestClass;\nimport org.junit.validator.PublicClassValidator;\nimport org.junit.validator.TestClassValidator;\n','D:/2022/testOPPO/junit4/junit4/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java'),('        RuleCollector<MethodRule> collector = new RuleCollector<MethodRule>();\n        getTestClass().collectAnnotatedMethodValues(target, Rule.class, MethodRule.class,\n                collector);\n        getTestClass().collectAnnotatedFieldValues(target, Rule.class, MethodRule.class,\n                collector);\n        return collector.result;\n        List<MethodRule> rules = getTestClass().getAnnotatedMethodValues(target, \n                Rule.class, MethodRule.class);\n\n        rules.addAll(getTestClass().getAnnotatedFieldValues(target,\n                Rule.class, MethodRule.class));\n\n        return rules;\n    }\n\n    /**\n     * Returns a {@link Statement}: apply all non-static fields\n     * annotated with {@link Rule}.\n     *\n     * @param statement The base statement\n     * @return a RunRules statement if any class-level {@link Rule}s are\n     *         found, or the base statement\n     */\n    private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules,\n            Statement statement) {\n        return testRules.isEmpty() ? statement :\n                new RunRules(statement, testRules, describeChild(method));\n        TestClass testClass = getTestClass();\n        List<MethodRule> rules = testClass.getAnnotatedMethodValues(target, \n                Rule.class, MethodRule.class);\n        rules.addAll(testClass.getAnnotatedFieldValues(target,\n                Rule.class, MethodRule.class));\n\n        List<TestFixture> fixtures = testClass.getAnnotatedMethodValues(\n                target, Fixture.class, TestFixture.class);\n        fixtures.addAll(testClass.getAnnotatedFieldValues(\n                target, Fixture.class, TestFixture.class));\n        if (!fixtures.isEmpty()) {\n            ClassWrapper classWrapper = new ClassWrapper(\n                    testClass.getJavaClass(), asList(testClass.getAnnotations()));\n            rules.add(new RunFixtures(fixtures, classWrapper));\n        }\n        \n        return rules;\n    }\n\n    /**\n     * Returns a {@link Statement}: apply all non-static fields\n     * annotated with {@link Rule}.\n     *\n     * @param statement The base statement\n     * @return a RunRules statement if any class-level {@link Rule}s are\n     *         found, or the base statement\n     */\n    private Statement withTestRules(FrameworkMethod method, List<TestRule> testRules,\n            Statement statement) {\n        return testRules.isEmpty() ? statement :\n                new RunRules(statement, testRules, describeChild(method));\n','        RuleCollector<MethodRule> collector = new RuleCollector<MethodRule>();\n        getTestClass().collectAnnotatedMethodValues(target, Rule.class, MethodRule.class,\n                collector);\n        getTestClass().collectAnnotatedFieldValues(target, Rule.class, MethodRule.class,\n                collector);\n        return collector.result;\n','D:/2022/testOPPO/junit4/junit4/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java'),('        RuleCollector<TestRule> collector = new RuleCollector<TestRule>();\n        getTestClass().collectAnnotatedMethodValues(target, Rule.class, TestRule.class, collector);\n        getTestClass().collectAnnotatedFieldValues(target, Rule.class, TestRule.class, collector);\n        return collector.result;\n        List<TestRule> result = getTestClass().getAnnotatedMethodValues(target,\n                Rule.class, TestRule.class);\n\n        result.addAll(getTestClass().getAnnotatedFieldValues(target,\n                Rule.class, TestRule.class));\n\n        return result;\n        TestClass testClass = getTestClass();\n        List<TestRule> result = testClass.getAnnotatedMethodValues(\n                target, Rule.class, TestRule.class);\n        result.addAll(testClass.getAnnotatedFieldValues(\n                target, Rule.class, TestRule.class));\n        return result;\n','        RuleCollector<TestRule> collector = new RuleCollector<TestRule>();\n        getTestClass().collectAnnotatedMethodValues(target, Rule.class, TestRule.class, collector);\n        getTestClass().collectAnnotatedFieldValues(target, Rule.class, TestRule.class, collector);\n        return collector.result;\n','D:/2022/testOPPO/junit4/junit4/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java'),('import static org.junit.internal.Checks.notNull;\nimport static java.util.Arrays.asList;\nimport static org.junit.internal.runners.rules.FixtureMemberValidator.CLASS_FIXTURE_FIELD_VALIDATOR;\nimport static org.junit.internal.runners.rules.FixtureMemberValidator.CLASS_FIXTURE_METHOD_VALIDATOR;\n','import static org.junit.internal.Checks.notNull;\n','D:/2022/testOPPO/junit4/junit4/src/main/java/org/junit/runners/ParentRunner.java'),('        ClassRuleCollector collector = new ClassRuleCollector();\n        testClass.collectAnnotatedMethodValues(null, ClassRule.class, TestRule.class, collector);\n        testClass.collectAnnotatedFieldValues(null, ClassRule.class, TestRule.class, collector);\n        return collector.getOrderedRules();\n        List<TestRule> result = testClass.getAnnotatedMethodValues(null, ClassRule.class, TestRule.class);\n        result.addAll(testClass.getAnnotatedFieldValues(null, ClassRule.class, TestRule.class));\n        return result;\n        TestClass clazz = getTestClass();\n        List<TestRule> result = clazz.getAnnotatedMethodValues(null, ClassRule.class, TestRule.class);\n        result.addAll(clazz.getAnnotatedFieldValues(null, ClassRule.class, TestRule.class));\n        \n        List<TestFixture> fixtures = clazz.getAnnotatedMethodValues(\n                null, ClassFixture.class, TestFixture.class);\n        fixtures.addAll(clazz.getAnnotatedFieldValues(null, ClassFixture.class, TestFixture.class));\n        if (!fixtures.isEmpty()) {\n            ClassWrapper classWrapper = new ClassWrapper(\n                    testClass.getJavaClass(), asList(testClass.getAnnotations()));\n            result.add(new RunFixtures(fixtures, classWrapper));\n        }\n        \n        return result;\n','        ClassRuleCollector collector = new ClassRuleCollector();\n        testClass.collectAnnotatedMethodValues(null, ClassRule.class, TestRule.class, collector);\n        testClass.collectAnnotatedFieldValues(null, ClassRule.class, TestRule.class, collector);\n        return collector.getOrderedRules();\n','D:/2022/testOPPO/junit4/junit4/src/main/java/org/junit/runners/ParentRunner.java'),('            sub->addItem(L\"Pick kart from slider (Ctrl + F9)\", DEBUG_VIEW_KART_SLIDER);\n            sub->addSeparator();\n            sub->addItem(L\"To previous kart (Page Up)\", DEBUG_VIEW_KART_PREVIOUS);\n            sub->addItem(L\"To next kart (Page Down)\", DEBUG_VIEW_KART_NEXT);\n            sub->addSeparator();\n            sub->addItem(L\"To kart 1 (Home)\", DEBUG_VIEW_KART_ONE);\n            sub->addItem(L\"To kart 2\", DEBUG_VIEW_KART_TWO);\n            sub->addItem(L\"To kart 3\", DEBUG_VIEW_KART_THREE);\n            sub->addItem(L\"To kart 4\", DEBUG_VIEW_KART_FOUR);\n            sub->addItem(L\"To kart 5\", DEBUG_VIEW_KART_FIVE);\n            sub->addItem(L\"To kart 6\", DEBUG_VIEW_KART_SIX);\n            sub->addItem(L\"To kart 7\", DEBUG_VIEW_KART_SEVEN);\n            sub->addItem(L\"To kart 8\", DEBUG_VIEW_KART_EIGHT);\n            sub->addItem(L\"To kart 9\", DEBUG_VIEW_KART_NINE);\n            sub->addItem(L\"To last kart (End)\", DEBUG_VIEW_KART_LAST);\n            sub->addItem(L\"Basketball\", DEBUG_POWERUP_RUBBERBALL );\n            sub->addItem(L\"Bowling\", DEBUG_POWERUP_BOWLING );\n            sub->addItem(L\"Bubblegum\", DEBUG_POWERUP_BUBBLEGUM );\n            sub->addItem(L\"Cake\", DEBUG_POWERUP_CAKE );\n            sub->addItem(L\"Parachute\", DEBUG_POWERUP_PARACHUTE );\n            sub->addItem(L\"Plunger\", DEBUG_POWERUP_PLUNGER );\n            sub->addItem(L\"Swatter\", DEBUG_POWERUP_SWATTER );\n            sub->addItem(L\"Switch\", DEBUG_POWERUP_SWITCH );\n            sub->addItem(L\"Zipper\", DEBUG_POWERUP_ZIPPER );\n            sub->addItem(L\"Nitro\", DEBUG_POWERUP_NITRO );\n\n            mnu->addItem(L\"Attachments >\",-1,true, true);\n            sub = mnu->getSubMenu(2);\n            sub->addItem(L\"Bomb\", DEBUG_ATTACHMENT_BOMB);\n            sub->addItem(L\"Anvil\", DEBUG_ATTACHMENT_ANVIL);\n            sub->addItem(L\"Parachute\", DEBUG_ATTACHMENT_PARACHUTE);\n            sub->addItem(L\"Explosion\", DEBUG_ATTACHMENT_EXPLOSION);\n            sub->addItem(L\"Basketball\", DEBUG_POWERUP_RUBBERBALL );\n            sub->addItem(L\"Bowling\", DEBUG_POWERUP_BOWLING );\n            sub->addItem(L\"Bubblegum\", DEBUG_POWERUP_BUBBLEGUM );\n            sub->addItem(L\"Cake\", DEBUG_POWERUP_CAKE );\n            sub->addItem(L\"Parachute\", DEBUG_POWERUP_PARACHUTE );\n            sub->addItem(L\"Plunger\", DEBUG_POWERUP_PLUNGER );\n            sub->addItem(L\"SuperSize\", DEBUG_POWERUP_SUPER );\n            sub->addItem(L\"Swatter\", DEBUG_POWERUP_SWATTER );\n            sub->addItem(L\"Switch\", DEBUG_POWERUP_SWITCH );\n            sub->addItem(L\"Zipper\", DEBUG_POWERUP_ZIPPER );\n            sub->addItem(L\"Nitro\", DEBUG_POWERUP_NITRO );\n\n            mnu->addItem(L\"Attachments >\",-1,true, true);\n            sub = mnu->getSubMenu(2);\n            sub->addItem(L\"Bomb\", DEBUG_ATTACHMENT_BOMB);\n            sub->addItem(L\"Anvil\", DEBUG_ATTACHMENT_ANVIL);\n            sub->addItem(L\"Parachute\", DEBUG_ATTACHMENT_PARACHUTE);\n            sub->addItem(L\"Explosion\", DEBUG_ATTACHMENT_EXPLOSION);\n','            sub->addItem(L\"Pick kart from slider (Ctrl + F9)\", DEBUG_VIEW_KART_SLIDER);\n            sub->addSeparator();\n            sub->addItem(L\"To previous kart (Page Up)\", DEBUG_VIEW_KART_PREVIOUS);\n            sub->addItem(L\"To next kart (Page Down)\", DEBUG_VIEW_KART_NEXT);\n            sub->addSeparator();\n            sub->addItem(L\"To kart 1 (Home)\", DEBUG_VIEW_KART_ONE);\n            sub->addItem(L\"To kart 2\", DEBUG_VIEW_KART_TWO);\n            sub->addItem(L\"To kart 3\", DEBUG_VIEW_KART_THREE);\n            sub->addItem(L\"To kart 4\", DEBUG_VIEW_KART_FOUR);\n            sub->addItem(L\"To kart 5\", DEBUG_VIEW_KART_FIVE);\n            sub->addItem(L\"To kart 6\", DEBUG_VIEW_KART_SIX);\n            sub->addItem(L\"To kart 7\", DEBUG_VIEW_KART_SEVEN);\n            sub->addItem(L\"To kart 8\", DEBUG_VIEW_KART_EIGHT);\n            sub->addItem(L\"To kart 9\", DEBUG_VIEW_KART_NINE);\n            sub->addItem(L\"To last kart (End)\", DEBUG_VIEW_KART_LAST);\n','D:/2022/testOPPO/junit4/stk-code/src/utils/debug.cpp'),('    m_squash_time          = std::numeric_limits<float>::max();\n    m_scale_change_ticks   = 0;\n    m_squash_time          = std::numeric_limits<float>::max();\n    m_super_time           = std::numeric_limits<float>::max();\n','    m_scale_change_ticks   = 0;\n    m_squash_time          = std::numeric_limits<float>::max();\n    m_super_time           = std::numeric_limits<float>::max();\n','D:/2022/testOPPO/junit4/stk-code/src/karts/kart.cpp'),('    /** To prevent using nitro in too short bursts */\n    int8_t        m_min_nitro_ticks;\n\n    // Used to know where we are when upscaling/downscaling the kart\n    // Set to positive to upscale, to negative to downscale\n    int8_t        m_scale_change_ticks;\n    float         m_super_time;\n    const float   SUPER_TRANSITION_TIME = 0.5;//TODO : move to config\n\n    /** To prevent using nitro in too short bursts */\n    int8_t        m_min_nitro_ticks;\n\n','    // Used to know where we are when upscaling/downscaling the kart\n    // Set to positive to upscale, to negative to downscale\n    int8_t        m_scale_change_ticks;\n    float         m_super_time;\n    const float   SUPER_TRANSITION_TIME = 0.5;//TODO : move to config\n\n    /** To prevent using nitro in too short bursts */\n    int8_t        m_min_nitro_ticks;\n\n','D:/2022/testOPPO/junit4/stk-code/src/karts/kart.hpp'),('\n    // ========================================================================================\n    // CONTROLLER related functions\n    // ----------------------------------------------------------------------------------------\n    virtual void  setBoostAI     (bool boosted) OVERRIDE;\n    // ----------------------------------------------------------------------------------------\n    virtual bool  getBoostAI     () const OVERRIDE;\n    // ----------------------------------------------------------------------------------------\n    /** Returns the controller of this kart. */\n    virtual Controller* getController() OVERRIDE { return m_controller; }\n    // ----------------------------------------------------------------------------------------\n    /** Returns the controller of this kart (const version). */\n    const Controller* getController() const OVERRIDE { return m_controller; }\n\n    // ========================================================================================\n    // LOCATION ON-TRACK related functions\n    // ----------------------------------------------------------------------------------------\n    /** Returns the coordinates of the front of the kart. This is used for\n     *  determining when the lap line is crossed. */\n    virtual const Vec3& getFrontXYZ() const OVERRIDE { return m_xyz_front; }\n    // -----------------------------------------------------------------------------------------\n    /** Returns a bullet transform object located at the kart\'s position\n        and oriented in the direction the kart is going. Can be useful\n        e.g. to calculate the starting point and direction of projectiles. */\n    virtual btTransform getAlignedTransform(const float customPitch=-1) OVERRIDE;\n    // ----------------------------------------------------------------------------------------\n    /** Returns the start transform, i.e. position and rotation. */\n    const btTransform& getResetTransform() const {return m_reset_transform;}\n    // ----------------------------------------------------------------------------------------\n    /** True if the wheels are touching the ground. */\n    virtual bool isOnGround() const OVERRIDE;\n    // ----------------------------------------------------------------------------------------\n    /** Returns true if the kart is close to the ground, used to dis/enable\n     *  the upright constraint to allow for more realistic explosions. */\n    bool isNearGround() const;\n    // ----------------------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n    /** Shows the star effect for a certain time. */\n    virtual void showStarEffect(float t) OVERRIDE;\n    // ------------------------------------------------------------------------\n    /** Returns the terrain info oject. */\n    virtual const TerrainInfo *getTerrainInfo() const OVERRIDE\n    {\n        return m_terrain_info;\n    }\n    // ------------------------------------------------------------------------\n    virtual void setOnScreenText(const wchar_t *text) OVERRIDE;\n    // ------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n    /** Returns if the kart is currently super sized. */\n    virtual bool isSuperSized() const OVERRIDE;\n    // ------------------------------------------------------------------------\n    /** Shows the star effect for a certain time. */\n    virtual void showStarEffect(float t) OVERRIDE;\n    // ------------------------------------------------------------------------\n    /** Returns the terrain info oject. */\n    virtual const TerrainInfo *getTerrainInfo() const OVERRIDE\n    {\n        return m_terrain_info;\n    }\n    // ------------------------------------------------------------------------\n    virtual void setOnScreenText(const wchar_t *text) OVERRIDE;\n    // ------------------------------------------------------------------------\n','    // ------------------------------------------------------------------------\n    /** Returns if the kart is currently super sized. */\n    virtual bool isSuperSized() const OVERRIDE;\n    // ------------------------------------------------------------------------\n    /** Shows the star effect for a certain time. */\n    virtual void showStarEffect(float t) OVERRIDE;\n    // ------------------------------------------------------------------------\n    /** Returns the terrain info oject. */\n    virtual const TerrainInfo *getTerrainInfo() const OVERRIDE\n    {\n        return m_terrain_info;\n    }\n    // ------------------------------------------------------------------------\n    virtual void setOnScreenText(const wchar_t *text) OVERRIDE;\n    // ------------------------------------------------------------------------\n','D:/2022/testOPPO/junit4/stk-code/src/karts/kart.hpp');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

CREATE DATABASE /*!32312 IF NOT EXISTS */`conflict` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin */;

USE conflict;

DROP TABLE IF EXISTS audit_file;

CREATE TABLE audit_file
(
    id            BIGINT AUTO_INCREMENT PRIMARY KEY,
    project_path  VARCHAR(200) NOT NULL,
    target_branch CHAR(40) NOT NULL,
    source_branch CHAR(40) NOT NULL,
    file_name     VARCHAR(200) NOT NULL, -- relative path to projectPath
    liked         BOOLEAN,
    INDEX idx_project_target_source_file (project_path(200), target_branch, source_branch, file_name(200))
) ENGINE = InnoDB
  DEFAULT CHARSET = utf8mb4
  COLLATE = utf8mb4_bin;

DROP TABLE IF EXISTS resolution_choice;

CREATE TABLE resolution_choice
(
    id         BIGINT AUTO_INCREMENT PRIMARY KEY,
    file_id    BIGINT NOT NULL, -- foreign key to audit_file
    block_idx  INT    NOT NULL,
    choice     VARCHAR(20),
    similarity FLOAT,
    similar_to  VARCHAR(20),
    INDEX idx_fileId_blockIdx (file_id, block_idx)
) ENGINE = InnoDB
  DEFAULT CHARSET = utf8mb4
  COLLATE = utf8mb4_bin;


